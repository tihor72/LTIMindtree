session-1 q-1


using System;

public class Animal
{
    public virtual void MakeSound()
    {
        Console.WriteLine("Some generic animal sound");
    }
}

public class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Bark");
    }
}

public class Cat : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Meow");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        int numberOfAnimals;

        while (true)
        {
            string input = Console.ReadLine();
            if (int.TryParse(input, out numberOfAnimals) && numberOfAnimals > 0)
            {
                break;
            }
            else
            {
                Console.WriteLine("Please enter a valid positive integer.");
                return;
            }
        }

        Animal[] animals = new Animal[numberOfAnimals];
        int i = 0;

        while (i < numberOfAnimals)
        {
            string type = Console.ReadLine().Trim().ToLower();

            if (type == "animal")
            {
                animals[i++] = new Animal();
            }
            else if (type == "dog")
            {
                animals[i++] = new Dog();
            }
            else if (type == "cat")
            {
                animals[i++] = new Cat();
            }
            else
            {
                Console.WriteLine("Invalid animal type. Please enter animal, dog, or cat.");
            }
        }

        Console.WriteLine("Sounds of the animals in the array:");
        foreach (Animal animal in animals)
        {
            animal.MakeSound();
        }
    }
}



session 1 q-2

using System;

public class Shape
{
    public virtual double CalculateArea()
    {
        return 0;
    }
}

public class Rectangle : Shape
{
    private double length;
    private double width;

    public Rectangle(double length, double width)
    {
        this.length = length;
        this.width = width;
    }

    public override double CalculateArea()
    {
        return length * width;
    }
}

public class Circle : Shape
{
    private double radius;

    public Circle(double radius)
    {
        this.radius = radius;
    }

    public override double CalculateArea()
    {
        return Math.Round(Math.PI * radius * radius, 2);
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        int numberOfShapes;
        if (!int.TryParse(Console.ReadLine(), out numberOfShapes) || numberOfShapes <= 0)
        {
            Console.WriteLine("Please enter a valid positive integer.");
            return;
        }

        Shape[] shapes = new Shape[numberOfShapes];
        int shapeIndex = 0;

        while (shapeIndex < numberOfShapes)
        {
            string shapeType = Console.ReadLine().Trim().ToLower();

            if (shapeType == "rectangle")
            {
                double length, width;
                if (!double.TryParse(Console.ReadLine(), out length) ||
                    !double.TryParse(Console.ReadLine(), out width))
                {
                    Console.WriteLine("Invalid Input for length or width. Please enter a numeric value.");
                    continue;
                }
                shapes[shapeIndex++] = new Rectangle(length, width);
            }
            else if (shapeType == "circle")
            {
                double radius;
                if (!double.TryParse(Console.ReadLine(), out radius))
                {
                    Console.WriteLine("Invalid input for radius. Please enter numeric values.");
                    continue;
                }
                shapes[shapeIndex++] = new Circle(radius);
            }
            else
            {
                Console.WriteLine("Unknown shape type. Please enter rectangle or circle.");
            }
        }

        Console.WriteLine("Areas of the shapes:");
        for (int i = 0; i < shapes.Length; i++)
        {
            string typeName = shapes[i].GetType().Name;
            double area = shapes[i].CalculateArea();
            Console.WriteLine($"Area of Shape {i + 1} ({typeName}): {area}");
        }
    }
}


session-1 q-3


using System;

public class Employee
{
    protected double hourlyRate;
    protected double hoursWorked;

    public Employee(double hourlyRate, double hoursWorked)
    {
        this.hourlyRate = hourlyRate;
        this.hoursWorked = hoursWorked;
    }

    public virtual double CalculateSalary()
    {
        return hourlyRate * hoursWorked;
    }
}

public class FullTimeEmployee : Employee
{
    public FullTimeEmployee(double hourlyRate, double hoursWorked) : base(hourlyRate, hoursWorked) { }

    public override double CalculateSalary()
    {
        return hourlyRate * hoursWorked;
    }
}

public class PartTimeEmployee : Employee
{
    public PartTimeEmployee(double hourlyRate, double hoursWorked) : base(hourlyRate, hoursWorked) { }

    public override double CalculateSalary()
    {
        return (hourlyRate * 0.8) * hoursWorked;
    }
}

public class Intern : Employee
{
    public Intern(double hourlyRate, double hoursWorked) : base(hourlyRate, hoursWorked) { }

    public override double CalculateSalary()
    {
        return (hourlyRate * 0.6) * hoursWorked;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        int numberOfEmployees;

        if (!int.TryParse(Console.ReadLine(), out numberOfEmployees) || numberOfEmployees <= 0)
        {
            Console.WriteLine("Please enter a valid positive integer for the number of employees.");
            return;
        }

        Employee[] employees = new Employee[numberOfEmployees];
        int i = 0;

        while (i < numberOfEmployees)
        {
            string type = Console.ReadLine().Trim().ToLower();
            double hourlyRate = 0, hoursWorked = 0;

            if (type != "fulltimeemployee" && type != "parttimeemployee" && type != "intern")
            {
                Console.WriteLine("Unknown employee type. Please enter FullTimeEmployee, PartTimeEmployee, or Intern.");
                continue;
            }

            // Read hourly rate
            if (!double.TryParse(Console.ReadLine(), out hourlyRate))
            {
                Console.WriteLine("Invalid Input for hourly rate. Please enter a numeric value.");
                continue;
            }

            // Read hours worked
            if (!double.TryParse(Console.ReadLine(), out hoursWorked))
            {
                Console.WriteLine("Invalid Input for hours worked. Please enter a numeric value.");
                continue;
            }

            // Create appropriate employee object
            if (type == "fulltimeemployee")
            {
                employees[i] = new FullTimeEmployee(hourlyRate, hoursWorked);
            }
            else if (type == "parttimeemployee")
            {
                employees[i] = new PartTimeEmployee(hourlyRate, hoursWorked);
            }
            else if (type == "intern")
            {
                employees[i] = new Intern(hourlyRate, hoursWorked);
            }

            i++;
        }

        Console.WriteLine("Salaries of the employees:");
        for (int j = 0; j < numberOfEmployees; j++)
        {
            string empType = employees[j].GetType().Name;
            double salary = employees[j].CalculateSalary();
            Console.WriteLine($"Salary of Employee {j + 1} ({empType}): {salary}");
        }
    }
}


______________________________________________________________________________________________________________________________________________________________________________
session-2 q-1


using System;
using System.Collections.Generic;

// Abstract base class
public abstract class Property
{
    public int PropertyId { get; set; }
    public string Location { get; set; }
    public double Area { get; set; }
    public string PropertyType { get; protected set; }

    public Property(int propertyId, string location, double area)
    {
        PropertyId = propertyId;
        Location = location;
        Area = area;
    }

    public abstract double CalculatePropertyTax();
}

// Derived class: Apartment
public class Apartment : Property
{
    public Apartment(int propertyId, string location, double area) : base(propertyId, location, area)
    {
        PropertyType = "Apartment";
    }

    public override double CalculatePropertyTax()
    {
        return Math.Round(Area * 0.01, 2);
    }
}

// Derived class: House
public class House : Property
{
    public House(int propertyId, string location, double area) : base(propertyId, location, area)
    {
        PropertyType = "House";
    }

    public override double CalculatePropertyTax()
    {
        return Math.Round(Area * 0.02, 2);
    }
}

// Derived class: CommercialBuilding
public class CommercialBuilding : Property
{
    public CommercialBuilding(int propertyId, string location, double area) : base(propertyId, location, area)
    {
        PropertyType = "Commercial Building";
    }

    public override double CalculatePropertyTax()
    {
        return Math.Round(Area * 0.03, 2);
    }
}

// Property Manager class
public class PropertyManager
{
    public void PrintPropertyTax(Property property)
    {
        double tax = property.CalculatePropertyTax();
        Console.WriteLine($"Property Tax for {property.PropertyType} (ID: {property.PropertyId}, Location: {property.Location}, Area: {property.Area}): {tax:F2}");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        List<Property> properties = new List<Property>();
        PropertyManager manager = new PropertyManager();

        if (!int.TryParse(Console.ReadLine(), out int count) || count <= 0)
        {
            Console.WriteLine("Invalid property type.");
            return;
        }

        for (int i = 0; i < count; i++)
        {
            if (!int.TryParse(Console.ReadLine(), out int propertyId))
            {
                Console.WriteLine("Invalid property type.");
                continue;
            }

            string location = Console.ReadLine();
            if (!double.TryParse(Console.ReadLine(), out double area))
            {
                Console.WriteLine("Invalid property type.");
                continue;
            }

            string type = Console.ReadLine();

            Property property = null;

            switch (type.Trim().ToLower())
            {
                case "apartment":
                    property = new Apartment(propertyId, location, area);
                    break;
                case "house":
                    property = new House(propertyId, location, area);
                    break;
                case "commercial building":
                    property = new CommercialBuilding(propertyId, location, area);
                    break;
                default:
                    Console.WriteLine("Invalid property type.");
                    continue;
            }

            properties.Add(property);
        }

        foreach (Property p in properties)
        {
            manager.PrintPropertyTax(p);
        }
    }
}



session-2 q-2

using System;
using System.Collections.Generic;

// Abstract base class
public abstract class Ticket
{
    public int TicketId { get; set; }
    public string TicketType { get; set; }

    public Ticket(int ticketId, string ticketType)
    {
        TicketId = ticketId;
        TicketType = ticketType;
    }

    public abstract (double, string) CalculatePrice();
}

// Child Ticket
public class ChildTicket : Ticket
{
    public ChildTicket(int ticketId) : base(ticketId, "Child") { }

    public override (double, string) CalculatePrice()
    {
        return (20, "Free ice cream included");
    }
}

// Adult Ticket
public class AdultTicket : Ticket
{
    public AdultTicket(int ticketId) : base(ticketId, "Adult") { }

    public override (double, string) CalculatePrice()
    {
        return (50, "Free park map included");
    }
}

// Senior Ticket
public class SeniorTicket : Ticket
{
    public SeniorTicket(int ticketId) : base(ticketId, "Senior") { }

    public override (double, string) CalculatePrice()
    {
        return (30, "Free wheelchair service included");
    }
}

// Ticket Manager
public class TicketManager
{
    public void PrintTicketPrice(Ticket ticket)
    {
        var (price, service) = ticket.CalculatePrice();
        Console.WriteLine($"Price: {price}, Included Service: {service}");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        List<Ticket> tickets = new List<Ticket>();
        TicketManager manager = new TicketManager();
        int totalCost = 0;
        int ticketIdCounter = 1;

        if (!int.TryParse(Console.ReadLine(), out int count) || count <= 0)
        {
            Console.WriteLine("Invalid ticket type");
            return;
        }

        for (int i = 0; i < count; i++)
        {
            string type = Console.ReadLine();
            Ticket ticket = null;

            switch (type.Trim().ToLower())
            {
                case "child":
                    ticket = new ChildTicket(ticketIdCounter++);
                    break;
                case "adult":
                    ticket = new AdultTicket(ticketIdCounter++);
                    break;
                case "senior":
                    ticket = new SeniorTicket(ticketIdCounter++);
                    break;
                default:
                    Console.WriteLine("Invalid ticket type");
                    continue;
            }

            tickets.Add(ticket);
            manager.PrintTicketPrice(ticket);
            totalCost += (int)ticket.CalculatePrice().Item1;
        }

        Console.WriteLine($"Total cost: {totalCost}");
    }
}


session-2 q-3

using System;

public interface IStudent
{
    void CalcTotal();
    void CalcAvg();
    void CalcGrade();
    void PrintMarksheet();
}

public class Student : IStudent
{
    private int rno;
    private string name;
    private int sub1;
    private int sub2;
    private int sub3;
    private int total;
    private double average;
    private string grade;

    public Student(int rno, string name, int sub1, int sub2, int sub3)
    {
        this.rno = rno;
        this.name = name;
        this.sub1 = sub1;
        this.sub2 = sub2;
        this.sub3 = sub3;
    }

    public void CalcTotal()
    {
        total = sub1 + sub2 + sub3;
    }

    public void CalcAvg()
    {
        average = total / 3.0;
    }

    public void CalcGrade()
    {
        if (average > 80)
            grade = "A";
        else if (average >= 60)
            grade = "B";
        else if (average >= 40)
            grade = "C";
        else
            grade = "F";
    }

    public void PrintMarksheet()
    {
        Console.WriteLine($"Roll No: {rno}");
        Console.WriteLine($"Name: {name}");
        Console.WriteLine($"Subject 1: {sub1}");
        Console.WriteLine($"Subject 2: {sub2}");
        Console.WriteLine($"Subject 3: {sub3}");
        Console.WriteLine($"Total Marks: {total}");
        Console.WriteLine($"Average Marks: {average}");
        Console.WriteLine($"Grade: {grade}");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        while (true)
        {
            int rno, sub1, sub2, sub3;
            string name;

            // Roll Number
            while (true)
            {
                string input = Console.ReadLine();
                if (int.TryParse(input, out rno))
                    break;
                else
                    Console.WriteLine("Invalid Input! Please enter a valid integer for Roll No.");
            }

            // Name
            name = Console.ReadLine();

            // Subject 1
            while (true)
            {
                string input = Console.ReadLine();
                if (int.TryParse(input, out sub1))
                    break;
                else
                    Console.WriteLine("Invalid input! Please enter a valid integer for Subject 1.");
            }

            // Subject 2
            while (true)
            {
                string input = Console.ReadLine();
                if (int.TryParse(input, out sub2))
                    break;
                else
                    Console.WriteLine("Invalid input! Please enter a valid integer for Subject 2.");
            }

            // Subject 3
            while (true)
            {
                string input = Console.ReadLine();
                if (int.TryParse(input, out sub3))
                    break;
                else
                    Console.WriteLine("Invalid input! Please enter a valid integer for Subject 3.");
            }

            Student student = new Student(rno, name, sub1, sub2, sub3);
            student.CalcTotal();
            student.CalcAvg();
            student.CalcGrade();
            student.PrintMarksheet();

            break; // Remove or change this if you want to allow multiple students
        }
    }
}

_____________________________________________________________________________________________________________________________________________________________________________

Session-3 q-1

using System;

public abstract class Laptop
{
    public string Brand { get; set; }
    public string Model { get; set; }
    public double Price { get; set; }
    public string Processor { get; set; }
    public int RAM { get; set; }
    public int Storage { get; set; }

    public Laptop(string brand, string model, double price, string processor, int ram, int storage)
    {
        Brand = brand;
        Model = model;
        Price = price;
        Processor = processor;
        RAM = ram;
        Storage = storage;
    }

    public abstract void DisplayDetails();
    public abstract void ApplyDiscount(double percentage);
}

public class GamingLaptop : Laptop
{
    public GamingLaptop(string brand, string model, double price, string processor, int ram, int storage)
        : base(brand, model, price, processor, ram, storage) { }

    public override void DisplayDetails()
    {
        Console.WriteLine($"Laptop Details: Brand - {Brand}, Model - {Model}, Price: ${Price}, Processor: {Processor}, RAM: {RAM} GB, Storage: {Storage} GB");
        Console.WriteLine("Type: Gaming");
    }

    public override void ApplyDiscount(double percentage)
    {
        Price -= Price * (percentage / 100);
    }
}

public class BusinessLaptop : Laptop
{
    public BusinessLaptop(string brand, string model, double price, string processor, int ram, int storage)
        : base(brand, model, price, processor, ram, storage) { }

    public override void DisplayDetails()
    {
        Console.WriteLine($"Laptop Details: Brand - {Brand}, Model - {Model}, Price: ${Price}, Processor: {Processor}, RAM: {RAM} GB, Storage: {Storage} GB");
        Console.WriteLine("Type: Business");
    }

    public override void ApplyDiscount(double percentage)
    {
        Price -= Price * (percentage / 100);
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        string brand = Console.ReadLine();
        string model = Console.ReadLine();
        double price = Convert.ToDouble(Console.ReadLine());
        string processor = Console.ReadLine();
        int ram = Convert.ToInt32(Console.ReadLine());
        int storage = Convert.ToInt32(Console.ReadLine());
        string laptopType = Console.ReadLine();

        Laptop laptop = null;

        if (laptopType == "Gaming")
        {
            laptop = new GamingLaptop(brand, model, price, processor, ram, storage);
        }
        else if (laptopType == "Business")
        {
            laptop = new BusinessLaptop(brand, model, price, processor, ram, storage);
        }

        if (laptop != null)
        {
            // Check if discount line is present
            string discountInput = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(discountInput))
            {
                double discount;
                if (double.TryParse(discountInput, out discount))
                {
                    laptop.ApplyDiscount(discount);
                }
            }

            laptop.DisplayDetails();
        }
    }
}


Session-3 q-2

using System;

public sealed class Circle
{
    private int radius;

    public Circle(int radius)
    {
        this.radius = radius;
    }

    public double GetArea()
    {
        return 3.14 * radius * radius;
    }

    public double GetCircumference()
    {
        return 2 * 3.14 * radius;
    }
}

public static class MathUtilities
{
    public static int Square(int number)
    {
        return number * number;
    }

    public static int Cube(int number)
    {
        return number * number * number;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        int n = Convert.ToInt32(Console.ReadLine()); // Radius
        int m = Convert.ToInt32(Console.ReadLine()); // Number for square and cube

        Circle circle = new Circle(n);

        Console.WriteLine("Area of Circle: " + circle.GetArea());
        Console.WriteLine("Circumference of Circle: " + circle.GetCircumference());

        Console.WriteLine("Square of " + m + ": " + MathUtilities.Square(m));
        Console.WriteLine("Cube of " + m + ": " + MathUtilities.Cube(m));
    }
}


session-3 q-3

using System;

public class StringAnalyzer{

    static char[] Vowels =  {'a','e','i','o','u'};

    public static (int vowel, int consonant) CountVowelsAndConsonants(string input){

        int Vvowel = 0, Cconsonant =0;

        foreach(char ch in input.ToLower()){

            if(char.IsLetter(ch)){

                if(Array.Exists(Vowels, v=> v == ch)){
                Vvowel++ ;
                }
                else{
                Cconsonant++;
                }
            }
        }
        return(Vvowel, Cconsonant);
    }
}

public class Program
{
    public static void Main(string[] args)
    {
    string input = "";

    while (string.IsNullOrWhiteSpace(input))
    {
        input = Console.ReadLine();
    }
        var(vowel,consonant) = StringAnalyzer.CountVowelsAndConsonants(input);

        Console.WriteLine($"Number of vowels: {vowel}");
        Console.WriteLine($"Number of consonants: {consonant}");
        
    }

}
