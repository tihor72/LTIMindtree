session-1, q-1

using System;


public sealed class Logger
{
    private static Logger instance = null;
    private static readonly object lockObject = new object();
    private Logger()
    {

    }

    public static Logger Instance
    {
        get{
            lock(lockObject)
            {
                if(instance==null)
                {
                    instance = new Logger();
                }
                return instance;
            }
        }
    }
    private int logCount=0;

    public void Log(string message) => Console.WriteLine("[Log]: "+message);
    public void GetLogCount(string message)
    {
        logCount++;
        Console.WriteLine($"[Log {logCount}]: {message}");
        Console.WriteLine("Log count: "+logCount);
    }

}
public class Program
{
    public static void Main(string[] args)
    {
        while(true)
        {
            string input = Console.ReadLine();
            if(input=="exit")
            {
                break;
            }
            Logger.Instance.GetLogCount(input);
        }
        
    }
}


____________
Session-2.q-1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using domaindriven.Models;

namespace domaindriven
{
    public class ConsoleApp
    {
        private List<Book> books = new List<Book>();
        void ListBooks()
        {
            if(books.Count == 0)
            {
                Console.WriteLine("No books available.");
            }
            foreach(var book in books){
                Console.WriteLine($"Id:{book.Id},Title:{book.Title},Author:{book.Author},Year:{book.Year},Rating:{book.Rating}");
            }
        }
        void FindBook(int id)
        {
            var book = books.FirstOrDefault(b=>b.Id==id);
            if(book == null)
            {
                Console.WriteLine($"Book with Id {id} not found.");
                return;
            }
            Console.WriteLine($"Found Book: Id: {book.Id}, Title: {book.Title}, Author: {book.Author}, Year: {book.Year}, Rating: {book.Rating}");
        }
        void AddBook()
        {
            Console.Write("Enter Title: ");
            string title = Console.ReadLine();
            Console.Write("Enter Author: ");
            string author = Console.ReadLine();
            Console.Write("Enter Year: ");
            int year = int.Parse(Console.ReadLine());
            Console.Write("Enter Rating: ");
            double rating = double.Parse(Console.ReadLine());

            int newId = books.Count == 0?1:books.Max(b=>b.Id)+1;
            books.Add(new Book{Id = newId, Title = title, Author = author, Year = year, Rating = rating});
            Console.WriteLine("Book added successfully.");
        }
        void EditBook(int id)
        {
            var book = books.FirstOrDefault(b=>b.Id==id);
            if(book==null)
            {
                Console.WriteLine($"Book with Id {id} not found.");
                return;
            }
            Console.Write("Enter new Title: ");
            book.Title = Console.ReadLine();
            Console.Write("Enter new Author: ");
            book.Author = Console.ReadLine();
            Console.Write("Enter new Year: ");
            book.Year = int.Parse(Console.ReadLine());
            Console.Write("Enter new Rating: ");
            book.Rating = double.Parse(Console.ReadLine());
            Console.WriteLine("Book edited successfully.");
        }
        void DeleteBook(int id)
        {
            var book = books.FirstOrDefault(b=>b.Id==id);
            if(book == null)
            {
                Console.WriteLine($"Book with Id {id} not found.");
                return;
            }
            books.Remove(book);
            Console.WriteLine("Book deleted successfully.");
        }
        public void Run()
        {
            while(true)
            {
                Console.WriteLine("\nWelcome to Book Console App");
                Console.WriteLine("1.List Books");
                Console.WriteLine("2.Find Books");
                Console.WriteLine("3.Add Books");
                Console.WriteLine("4.Edit Books");
                Console.WriteLine("5.Delete Books");
                Console.WriteLine("6.Exit");
                Console.WriteLine("Enter your choice(1-6):");
                string choice = Console.ReadLine();
                switch(choice)
                {
                    case "1":
                       Console.WriteLine("Books:");
                       ListBooks();
                       break;
                    case "2":
                       Console.Write("Enter Book Id: ");
                       FindBook(int.Parse(Console.ReadLine()));
                       break;
                    case "3":
                       AddBook();
                       break;
                    case "4":
                       Console.Write("Enter Book Id to Edit: ");
                       EditBook(int.Parse(Console.ReadLine()));
                       break;
                    case "5":
                       Console.Write("Enter Book Id to Delete: ");
                       DeleteBook(int.Parse(Console.ReadLine()));
                       break;
                    case "6":
                       Console.Write("Exiting application...");
                       return;
                    default:
                       Console.WriteLine("Exiting the Book Console App! Good Bye");
                       break;
                }
            }
        }
    }
}

// Write methods here
// 1. ListBooks()
// 2. FindBook()
// 3. AddBook()
// 4. EditBook()
// 5. DeleteBook()


book:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace domaindriven.Models
{
    public class Book{
        public int Id{get;set;}
        public string Title{get;set;}
        public string Author{get;set;}
        public int Year{get;set;}
        public double Rating{get;set;}
    }
}

session-2 q-2:

*Movie.cs* ðŸ‘‡

 

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

 

namespace domaindriven.Models

{

    public class Movie

    {

        public int Id{get;set;}

        public string Name {get;set;}

        public int Year{get;set;}

        public double Rating {get;set;}

 

    }

} 

 

 *ConsoleApp.cs* ðŸ‘‡


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using domaindriven.Models;
 
namespace domaindriven
{
    public class ConsoleApp
    {
        private List<Movie> movies=new List<Movie>();
        public void Run()
        {
            int choice;
            do
            {
                Console.WriteLine("\n Choose an action:");
                Console.WriteLine("1. List Movies");
                Console.WriteLine("2. Add Movies");
                Console.WriteLine("3. Edit Movies");
                Console.WriteLine("4. Delete Movies");
                Console.WriteLine("5. Find Movies");
                Console.WriteLine("0. Exit");
                Console.WriteLine("Enter your choice: ");
                int.TryParse(Console.ReadLine(), out choice);
                switch(choice)
                {
                    case 1: ListMovies(); break;
                    case 2: AddMovie(); break;
                    case 3:
                            Console.Write("Enter the Id of the movie to find: ");
                            int.TryParse(Console.ReadLine(), out int id2);
                            EditMovie(id2);
                            break;
                    case 4: Console.Write("Enter the Id of the movie to find: ");
                         int.TryParse(Console.ReadLine(), out int id4); DeleteMovie(id4); break;
                    case 5:
                        Console.Write("Enter the Id of the movie to find: ");
                         int.TryParse(Console.ReadLine(), out int id3);
                         FindMovie(id3);
                         break;
                    case 0: Console.WriteLine("Exiting the Movie Console App. Goodbye!"); break;
                    default: Console.WriteLine("Invalid choice. Try again."); break;
                }
            }while(choice!=0);
        }
        private void ListMovies()
        {
            if(!movies.Any())
            {
                Console.WriteLine("No movies in the list.");
                return;
            }
            Console.WriteLine("List of Movies:");
            foreach(var movie in movies)
            {
                Console.WriteLine($"Id: {movie.Id}, Name: {movie.Name}, Year: {movie.Year}, Rating: {movie.Rating} ");
            }

        }
        private void AddMovie()
        {
            Movie movie=new Movie();
            movie.Id=movies.Count>0? movies.Max(m=>m.Id) +1 :1;
            Console.Write("Name: ");
            movie.Name=Console.ReadLine();
            Console.Write("Year: ");
            int.TryParse(Console.ReadLine(), out int year);
            movie.Year=year;
            Console.Write("Rating: ");
            double.TryParse(Console.ReadLine(), out double rating);
            movie.Rating=rating;
            movies.Add(movie);
            Console.WriteLine("Movie added successfully!");
        }

        private void EditMovie(int id)
        {
            var movie=movies.FirstOrDefault(m=>m.Id==id);
          if(movie==null)
            {
                Console.WriteLine($"Movie with Id {id} not found.");
                return;
            }
            Console.WriteLine($"Editing details for movie with Id {id}: ");
            Console.Write("Name: ");
            movie.Name=Console.ReadLine();
            Console.Write("Year: ");
            int.TryParse(Console.ReadLine(), out int year);
            movie.Year=year;
            Console.Write("Rating: ");
            double.TryParse(Console.ReadLine(), out double rating);
            movie.Rating=rating;
            Console.WriteLine("Movie edited successfully!");

 

        }

        private void DeleteMovie(int id)

        {

           

            var movie=movies.FirstOrDefault(m=>m.Id==id);

            if(movie==null)

            {

                Console.WriteLine($"Movie with Id {id} not found.");

                return;

            }

            movies.Remove(movie);

            Console.WriteLine($"Movie with Id {id} deleted successfully!");

        }

        private void FindMovie(int id)

        {
            var movie=movies.FirstOrDefault(m=>m.Id==id);

            if(movie==null)

            {

                Console.WriteLine($"Movie with Id {id} not found.");

                return;

            }

            Console.WriteLine($"Found Movie: Id: {movie.Id}, Name: {movie.Name}, Year: {movie.Year}, Rating: {movie.Rating:0.0}");

        }
    }
}
