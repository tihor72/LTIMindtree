session-1 q-1


using System;

public class Animal
{
    public virtual void MakeSound()
    {
        Console.WriteLine("Some generic animal sound");
    }
}

public class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Bark");
    }
}

public class Cat : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Meow");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        int numberOfAnimals;

        while (true)
        {
            string input = Console.ReadLine();
            if (int.TryParse(input, out numberOfAnimals) && numberOfAnimals > 0)
            {
                break;
            }
            else
            {
                Console.WriteLine("Please enter a valid positive integer.");
                return;
            }
        }

        Animal[] animals = new Animal[numberOfAnimals];
        int i = 0;

        while (i < numberOfAnimals)
        {
            string type = Console.ReadLine().Trim().ToLower();

            if (type == "animal")
            {
                animals[i++] = new Animal();
            }
            else if (type == "dog")
            {
                animals[i++] = new Dog();
            }
            else if (type == "cat")
            {
                animals[i++] = new Cat();
            }
            else
            {
                Console.WriteLine("Invalid animal type. Please enter animal, dog, or cat.");
            }
        }

        Console.WriteLine("Sounds of the animals in the array:");
        foreach (Animal animal in animals)
        {
            animal.MakeSound();
        }
    }
}



session 1 q-2

using System;

public class Shape
{
    public virtual double CalculateArea()
    {
        return 0;
    }
}

public class Rectangle : Shape
{
    private double length;
    private double width;

    public Rectangle(double length, double width)
    {
        this.length = length;
        this.width = width;
    }

    public override double CalculateArea()
    {
        return length * width;
    }
}

public class Circle : Shape
{
    private double radius;

    public Circle(double radius)
    {
        this.radius = radius;
    }

    public override double CalculateArea()
    {
        return Math.Round(Math.PI * radius * radius, 2);
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        int numberOfShapes;
        if (!int.TryParse(Console.ReadLine(), out numberOfShapes) || numberOfShapes <= 0)
        {
            Console.WriteLine("Please enter a valid positive integer.");
            return;
        }

        Shape[] shapes = new Shape[numberOfShapes];
        int shapeIndex = 0;

        while (shapeIndex < numberOfShapes)
        {
            string shapeType = Console.ReadLine().Trim().ToLower();

            if (shapeType == "rectangle")
            {
                double length, width;
                if (!double.TryParse(Console.ReadLine(), out length) ||
                    !double.TryParse(Console.ReadLine(), out width))
                {
                    Console.WriteLine("Invalid Input for length or width. Please enter a numeric value.");
                    continue;
                }
                shapes[shapeIndex++] = new Rectangle(length, width);
            }
            else if (shapeType == "circle")
            {
                double radius;
                if (!double.TryParse(Console.ReadLine(), out radius))
                {
                    Console.WriteLine("Invalid input for radius. Please enter numeric values.");
                    continue;
                }
                shapes[shapeIndex++] = new Circle(radius);
            }
            else
            {
                Console.WriteLine("Unknown shape type. Please enter rectangle or circle.");
            }
        }

        Console.WriteLine("Areas of the shapes:");
        for (int i = 0; i < shapes.Length; i++)
        {
            string typeName = shapes[i].GetType().Name;
            double area = shapes[i].CalculateArea();
            Console.WriteLine($"Area of Shape {i + 1} ({typeName}): {area}");
        }
    }
}


session-1 q-3


using System;

public class Employee
{
    protected double hourlyRate;
    protected double hoursWorked;

    public Employee(double hourlyRate, double hoursWorked)
    {
        this.hourlyRate = hourlyRate;
        this.hoursWorked = hoursWorked;
    }

    public virtual double CalculateSalary()
    {
        return hourlyRate * hoursWorked;
    }
}

public class FullTimeEmployee : Employee
{
    public FullTimeEmployee(double hourlyRate, double hoursWorked) : base(hourlyRate, hoursWorked) { }

    public override double CalculateSalary()
    {
        return hourlyRate * hoursWorked;
    }
}

public class PartTimeEmployee : Employee
{
    public PartTimeEmployee(double hourlyRate, double hoursWorked) : base(hourlyRate, hoursWorked) { }

    public override double CalculateSalary()
    {
        return (hourlyRate * 0.8) * hoursWorked;
    }
}

public class Intern : Employee
{
    public Intern(double hourlyRate, double hoursWorked) : base(hourlyRate, hoursWorked) { }

    public override double CalculateSalary()
    {
        return (hourlyRate * 0.6) * hoursWorked;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        int numberOfEmployees;

        if (!int.TryParse(Console.ReadLine(), out numberOfEmployees) || numberOfEmployees <= 0)
        {
            Console.WriteLine("Please enter a valid positive integer for the number of employees.");
            return;
        }

        Employee[] employees = new Employee[numberOfEmployees];
        int i = 0;

        while (i < numberOfEmployees)
        {
            string type = Console.ReadLine().Trim().ToLower();
            double hourlyRate = 0, hoursWorked = 0;

            if (type != "fulltimeemployee" && type != "parttimeemployee" && type != "intern")
            {
                Console.WriteLine("Unknown employee type. Please enter FullTimeEmployee, PartTimeEmployee, or Intern.");
                continue;
            }

            // Read hourly rate
            if (!double.TryParse(Console.ReadLine(), out hourlyRate))
            {
                Console.WriteLine("Invalid Input for hourly rate. Please enter a numeric value.");
                continue;
            }

            // Read hours worked
            if (!double.TryParse(Console.ReadLine(), out hoursWorked))
            {
                Console.WriteLine("Invalid Input for hours worked. Please enter a numeric value.");
                continue;
            }

            // Create appropriate employee object
            if (type == "fulltimeemployee")
            {
                employees[i] = new FullTimeEmployee(hourlyRate, hoursWorked);
            }
            else if (type == "parttimeemployee")
            {
                employees[i] = new PartTimeEmployee(hourlyRate, hoursWorked);
            }
            else if (type == "intern")
            {
                employees[i] = new Intern(hourlyRate, hoursWorked);
            }

            i++;
        }

        Console.WriteLine("Salaries of the employees:");
        for (int j = 0; j < numberOfEmployees; j++)
        {
            string empType = employees[j].GetType().Name;
            double salary = employees[j].CalculateSalary();
            Console.WriteLine($"Salary of Employee {j + 1} ({empType}): {salary}");
        }
    }
}
