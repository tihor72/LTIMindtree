using System;
using System.Collections.Generic;

public abstract class Shape
{
    public abstract double Perimeter();
}

public class Rectangle : Shape
{
    public double Width {get;}
    public double Height {get;}

    public Rectangle(double width,double height)
    {
         this.Width = width;
         this.Height = height;
    }
    public override double Perimeter()
    {
      return 2*(Width+Height);
    }

}

public class Circle : Shape
{
  public double Radius {get;}

  public Circle(double radius)
  {
    Radius = radius;
  }
    public override double Perimeter()
    {
       return 2*Math.PI*Radius;
    }
}

public class PerimeterCalculator
{
    public double CalculateTotalPerimeter(List<Shape> shape)
    {
       double total =0;
       foreach(Shape sh in shape)
       {
        total += sh.Perimeter();
       }
       return total;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        List<Shape> shape1 = new List<Shape>();
        string s = "Y" ;
       while(s=="Y")
        {
            string shape = Console.ReadLine().ToUpper();
            if(shape=="R")
            {
             double width = double.Parse(Console.ReadLine());
             double height = double.Parse(Console.ReadLine());
              shape1.Add(new Rectangle(width,height));
            }
            else if(shape=="C")
            {
               double radius = double.Parse(Console.ReadLine());
               shape1.Add(new Circle(radius));
            }
            else
            {
                Console.WriteLine("Invalid shape. Please try again.");
                break;
            }
            s = Console.ReadLine().ToUpper();
    
            


        }
        
PerimeterCalculator calculator = new PerimeterCalculator();
double totalPerimeter = calculator.CalculateTotalPerimeter(shape1);


Console.WriteLine($"Total perimeter of all shapes: {totalPerimeter:F2}");
       
        
    }
}
