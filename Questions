Session-3 q-1

using System;
using System.Collections.Generic;

public abstract class Shape
{
    public abstract double Perimeter();
}

public class Rectangle : Shape
{
    public double Width {get;}
    public double Height {get;}

    public Rectangle(double width,double height)
    {
         this.Width = width;
         this.Height = height;
    }
    public override double Perimeter()
    {
      return 2*(Width+Height);
    }

}

public class Circle : Shape
{
  public double Radius {get;}

  public Circle(double radius)
  {
    Radius = radius;
  }
    public override double Perimeter()
    {
       return 2*Math.PI*Radius;
    }
}

public class PerimeterCalculator
{
    public double CalculateTotalPerimeter(List<Shape> shape)
    {
       double total =0;
       foreach(Shape sh in shape)
       {
        total += sh.Perimeter();
       }
       return total;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        List<Shape> shape1 = new List<Shape>();
        string s = "Y" ;
       while(s=="Y")
        {
            string shape = Console.ReadLine().ToUpper();
            if(shape=="R")
            {
             double width = double.Parse(Console.ReadLine());
             double height = double.Parse(Console.ReadLine());
              shape1.Add(new Rectangle(width,height));
            }
            else if(shape=="C")
            {
               double radius = double.Parse(Console.ReadLine());
               shape1.Add(new Circle(radius));
            }
            else
            {
                Console.WriteLine("Invalid shape. Please try again.");
                break;
            }
            s = Console.ReadLine().ToUpper();
    
            


        }
        
PerimeterCalculator calculator = new PerimeterCalculator();
double totalPerimeter = calculator.CalculateTotalPerimeter(shape1);


Console.WriteLine($"Total perimeter of all shapes: {totalPerimeter:F2}");
       
        
    }
}

session-3 q-2:

using System;

public abstract class Shape3D
{
    public abstract double Volume();
}

public class Cuboid : Shape3D
{
    public double Length{get;}
    public double Width {get;}
    public double Height {get;}

    public Cuboid(double length,double width,double height)
    {
        this.Length= length;
        this.Width = width;
        this.Height = height;
    }

    public override double Volume()
    {
        return Length*Width*Height;
    }
}

public class Sphere : Shape3D
{
    public double Radius {get;}

    public Sphere(double radius)
    {
         this.Radius = radius;
    }
    public override double Volume()
    {
        return (4.0/3.0)*Math.PI*Math.Pow(Radius,3);
    }
}
public class VolumeCalculator{
    public double CalculateTotalVolume(List<Shape3D> shape)
    {
        double total =0;
        foreach(Shape3D sh in shape)
        {
            total+=sh.Volume();
        }
        return total;

    }

}


public class Program
{
    public static void Main(string[] args)
    {
        List<Shape3D> shape = new List<Shape3D>();
        string s = "Y";
        while(s=="Y")
        {
            string sh = Console.ReadLine().ToUpper();
            if(sh=="CU")
            {
                  double length = double.Parse(Console.ReadLine());
                double width = double.Parse(Console.ReadLine());
                double height = double.Parse(Console.ReadLine());
              shape.Add(new Cuboid(length,width,height));

              
              

            }
            else if(sh=="S")
            {
                double radius = double.Parse(Console.ReadLine());
                shape.Add(new Sphere(radius));
              


            }
            else
            {
                Console.WriteLine("Invalid shape. Please try again.");
                break;
            }
            s= Console.ReadLine().ToUpper();

        }

        VolumeCalculator v1 = new VolumeCalculator();
        double totalVolume = v1.CalculateTotalVolume(shape);
       Console.WriteLine($"Total volume of all shapes: {totalVolume:F2}");

        
    }
}

session-3 q-3:

using System;


public interface IPrintable
{
    void Print();
}

public interface IScannable
{
    void Scan();
}

public interface IFaxable
{
    void Fax();
}


public class MultiFunctionalPrinter : IPrintable, IScannable, IFaxable
{
    public void Print()
    {
        Console.WriteLine("Printing document...");
    }

    public void Scan()
    {
        Console.WriteLine("Scanning document...");
    }

    public void Fax()
    {
        Console.WriteLine("Faxing document...");
    }
}

public class BasicPrinter : IPrintable
{
    public void Print()
    {
        Console.WriteLine("Printing document...");
    }
}

public class BasicScanner : IScannable
{
    public void Scan()
    {
        Console.WriteLine("Scanning document...");
    }
}

class Program
{
    static void Main(string[] args)
    {
        
        string deviceType = Console.ReadLine()?.Trim().ToUpper();

        
        switch (deviceType)
        {
            case "M":
                MultiFunctionalPrinter multiPrinter = new MultiFunctionalPrinter();
                multiPrinter.Print();
                multiPrinter.Scan();
                multiPrinter.Fax();
                break;

            case "B":
                BasicPrinter basicPrinter = new BasicPrinter();
                basicPrinter.Print();
                break;

            case "S":
                BasicScanner basicScanner = new BasicScanner();
                basicScanner.Scan();
                break;

            default:
                Console.WriteLine("Invalid device type. Please try again.");
                break;
        }
    }
}

Which FileMode value will throw an exception if the file does not exist?
âœ… FileMode.Open

What does the File.Exists method return in C#?
âœ… true if the file exists, false otherwise

What will happen if you try to open a file for writing using FileMode.Append, but the file does not exist?
âœ… The file will be created

What is the default buffer size for a BufferedStream object in C#?
âœ… 4096 bytes

Which class is used for asynchronous file operations in C#?
âœ… FileStream

Which exception is thrown when trying to access a file that is already in use by another process?
âœ… IOException

Which class should be used to write text data to a file line by line in C#?
âœ… StreamWriter

What happens if you use the FileMode.Truncate option when opening a file in C#?
âœ… The file will be opened, and all its contents will be erased

Which method is used to get the size of a file in bytes in C#?
âœ… new FileInfo().Length

In C#, which class is used to check and manipulate the attributes of a file (e.g., read-only, hidden)?
âœ… FileInfo

Which exception is thrown if you attempt to read past the end of a file using a StreamReader?
âœ… EndOfStreamException

Which namespace contains the JsonSerializer class in .NET?
âœ… System.Text.Json

Which class is used to handle JSON serialization in .NET Core?
âœ… JsonSerializer

What is the default format used by the DataContractSerializer for serialization?
âœ… XML

Which class is used to handle SOAP serialization in .NET?
âœ… SoapFormatter

Which serialization format provides the best performance for network communication?
âœ… Binary

Which of the following attributes is used to map a property to a JSON key in System.Text.Json?
âœ… [JsonPropertyName]

Which class is used to handle JSON serialization in .NET Core?
âœ… JsonSerializer

Which of the following formats is NOT supported by the DataContractSerializer?
âœ… JSON

Which method of the XmlSerializer class is used to deserialize XML data into an object?
âœ… Deserialize

Which of the following classes is typically used for serializing objects into a memory stream?
âœ… BinaryFormatter

Which method can be overridden to control the serialization of a class in C#?
âœ… GetObjectData

Which interface is implemented to provide custom serialization for a class?
âœ… ISerializable

Which serialization approach allows partial serialization of only specific fields of an object?
âœ… DataContract serialization

Which method in the DataContractJsonSerializer class is used to serialize an object into a JSON string?
âœ… WriteObject

Which of the following types cannot be serialized using XmlSerializer?
âœ… Classes implementing IDisposable

Which serialization format should you use if you need to serialize an object that includes cyclic references?
âœ… DataContractSerializer


Solution ðŸ‘‡

using System;
using System.Collections.Generic;

public class Exam{
    private List<string> questionList=new List<string>();
    private const int TotalQuestion=3;
   
    public void AddQuestion(string question){
        if(string.IsNullOrWhiteSpace(question)){
            throw new ArgumentException("Question cannot be null.");
        }
        if(questionList.Count>=TotalQuestion){
            throw new InvalidOperationException("Cannot add more than total questions.");
        }
       
        questionList.Add(question);
    }
   
    public void AllQuestion(){
        Console.WriteLine("All Questions: ");
        foreach(string question in questionList){
            Console.WriteLine(question);
        }
    }
   
    public void FindQuestion(string question){
        if(questionList.Contains(question)){
            Console.WriteLine("Question Found: "+question);
        }else{
            Console.WriteLine("Question Not Found.");
        }
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
        Exam exam=new Exam();
        try{
            Console.WriteLine("Enter comma-seperated questions:");
           
            string input=Console.ReadLine();
            string[] questions=input.Split(',');
           
            foreach(string q in questions){
                exam.AddQuestion(q.Trim());
            }
            exam.AllQuestion();
            Console.WriteLine("Enter a questionn to find: ");
            string search=Console.ReadLine();
            exam.FindQuestion(search.Trim());
        }
        catch(Exception e){
            Console.WriteLine("Error: "+e.Message);
        }
    }
}