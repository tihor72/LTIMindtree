Session-3 q-1

using System;
using System.Collections.Generic;

public abstract class Shape
{
    public abstract double Perimeter();
}

public class Rectangle : Shape
{
    public double Width {get;}
    public double Height {get;}

    public Rectangle(double width,double height)
    {
         this.Width = width;
         this.Height = height;
    }
    public override double Perimeter()
    {
      return 2*(Width+Height);
    }

}

public class Circle : Shape
{
  public double Radius {get;}

  public Circle(double radius)
  {
    Radius = radius;
  }
    public override double Perimeter()
    {
       return 2*Math.PI*Radius;
    }
}

public class PerimeterCalculator
{
    public double CalculateTotalPerimeter(List<Shape> shape)
    {
       double total =0;
       foreach(Shape sh in shape)
       {
        total += sh.Perimeter();
       }
       return total;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        List<Shape> shape1 = new List<Shape>();
        string s = "Y" ;
       while(s=="Y")
        {
            string shape = Console.ReadLine().ToUpper();
            if(shape=="R")
            {
             double width = double.Parse(Console.ReadLine());
             double height = double.Parse(Console.ReadLine());
              shape1.Add(new Rectangle(width,height));
            }
            else if(shape=="C")
            {
               double radius = double.Parse(Console.ReadLine());
               shape1.Add(new Circle(radius));
            }
            else
            {
                Console.WriteLine("Invalid shape. Please try again.");
                break;
            }
            s = Console.ReadLine().ToUpper();
    
            


        }
        
PerimeterCalculator calculator = new PerimeterCalculator();
double totalPerimeter = calculator.CalculateTotalPerimeter(shape1);


Console.WriteLine($"Total perimeter of all shapes: {totalPerimeter:F2}");
       
        
    }
}

session-3 q-2:

using System;

public abstract class Shape3D
{
    public abstract double Volume();
}

public class Cuboid : Shape3D
{
    public double Length{get;}
    public double Width {get;}
    public double Height {get;}

    public Cuboid(double length,double width,double height)
    {
        this.Length= length;
        this.Width = width;
        this.Height = height;
    }

    public override double Volume()
    {
        return Length*Width*Height;
    }
}

public class Sphere : Shape3D
{
    public double Radius {get;}

    public Sphere(double radius)
    {
         this.Radius = radius;
    }
    public override double Volume()
    {
        return (4.0/3.0)*Math.PI*Math.Pow(Radius,3);
    }
}
public class VolumeCalculator{
    public double CalculateTotalVolume(List<Shape3D> shape)
    {
        double total =0;
        foreach(Shape3D sh in shape)
        {
            total+=sh.Volume();
        }
        return total;

    }

}


public class Program
{
    public static void Main(string[] args)
    {
        List<Shape3D> shape = new List<Shape3D>();
        string s = "Y";
        while(s=="Y")
        {
            string sh = Console.ReadLine().ToUpper();
            if(sh=="CU")
            {
                  double length = double.Parse(Console.ReadLine());
                double width = double.Parse(Console.ReadLine());
                double height = double.Parse(Console.ReadLine());
              shape.Add(new Cuboid(length,width,height));

              
              

            }
            else if(sh=="S")
            {
                double radius = double.Parse(Console.ReadLine());
                shape.Add(new Sphere(radius));
              


            }
            else
            {
                Console.WriteLine("Invalid shape. Please try again.");
                break;
            }
            s= Console.ReadLine().ToUpper();

        }

        VolumeCalculator v1 = new VolumeCalculator();
        double totalVolume = v1.CalculateTotalVolume(shape);
       Console.WriteLine($"Total volume of all shapes: {totalVolume:F2}");

        
    }
}

session-3 q-3:

using System;


public interface IPrintable
{
    void Print();
}

public interface IScannable
{
    void Scan();
}

public interface IFaxable
{
    void Fax();
}


public class MultiFunctionalPrinter : IPrintable, IScannable, IFaxable
{
    public void Print()
    {
        Console.WriteLine("Printing document...");
    }

    public void Scan()
    {
        Console.WriteLine("Scanning document...");
    }

    public void Fax()
    {
        Console.WriteLine("Faxing document...");
    }
}

public class BasicPrinter : IPrintable
{
    public void Print()
    {
        Console.WriteLine("Printing document...");
    }
}

public class BasicScanner : IScannable
{
    public void Scan()
    {
        Console.WriteLine("Scanning document...");
    }
}

class Program
{
    static void Main(string[] args)
    {
        
        string deviceType = Console.ReadLine()?.Trim().ToUpper();

        
        switch (deviceType)
        {
            case "M":
                MultiFunctionalPrinter multiPrinter = new MultiFunctionalPrinter();
                multiPrinter.Print();
                multiPrinter.Scan();
                multiPrinter.Fax();
                break;

            case "B":
                BasicPrinter basicPrinter = new BasicPrinter();
                basicPrinter.Print();
                break;

            case "S":
                BasicScanner basicScanner = new BasicScanner();
                basicScanner.Scan();
                break;

            default:
                Console.WriteLine("Invalid device type. Please try again.");
                break;
        }
    }
}
